install.packages("geoR",repos = "http://cran.r-project.org")
install.packages("maptools",repos = "http://cran.r-project.org")
install.packages("maps",repos = "http://cran.r-project.org")
install.packages("mvtnorm",repos = "http://cran.r-project.org")
# 2. Simulating a Gaussian spatial process
oh.range = map("state", "iowa", plot=FALSE)$range
# 1. The GeoR package
library(geoR)
library(maps)
library(mvtnorm) # package for simulation
rm(list=ls()) # clear workspace
# 2. Simulating a Gaussian spatial process
oh.range = map("state", "iowa", plot=FALSE)$range
rx = oh.range[2] - oh.range[1] # range in x direction
ry = oh.range[4] - oh.range[3] # range in y direction
# 1. The GeoR package
library(geoR)
library(maps)
library(mvtnorm) # package for simulation
rm(list=ls()) # clear workspace
# 2. Simulating a Gaussian spatial process
# 2.1 Obtain the limits of our spatial domain
ia.range = map("state", "iowa", plot=FALSE)$range
rx = ia.range[2] - ia.range[1] # range in x direction
ry = ia.range[4] - ia.range[3] # range in y direction
# 2.2 Define the spatial points (locations)
#     at which to simulate the Gaussian process
xg = seq(ia.range[1], ia.range[2], length.out=30)
yg = seq(ia.range[3], ia.range[4], length.out=30)
iagrid.locs = expand.grid(xg, yg)
map("state", "iowa")
points(iagrid.locs, pch=20)
ntot = dim(ohgrid.locs)[1]
# 1. The GeoR package
library(geoR)
library(maps)
library(mvtnorm) # package for simulation
rm(list=ls()) # clear workspace
# 2. Simulating a Gaussian spatial process
# 2.1 Obtain the limits of our spatial domain
ia.range = map("state", "iowa", plot=FALSE)$range
rx = ia.range[2] - ia.range[1] # range in x direction
ry = ia.range[4] - ia.range[3] # range in y direction
# 2.2 Define the spatial points (locations)
#     at which to simulate the Gaussian process
xg = seq(ia.range[1], ia.range[2], length.out=30)
yg = seq(ia.range[3], ia.range[4], length.out=30)
iagrid.locs = expand.grid(xg, yg)
map("state", "iowa")
points(iagrid.locs, pch=20)
ntot = dim(iagrid.locs)[1]
# 1. The GeoR package
library(geoR)
library(maps)
library(mvtnorm) # package for simulation
rm(list=ls()) # clear workspace
# 2. Simulating a Gaussian spatial process
# 2.1 Obtain the limits of our spatial domain
ia.range = map("state", "iowa", plot=FALSE)$range
rx = ia.range[2] - ia.range[1] # range in x direction
ry = ia.range[4] - ia.range[3] # range in y direction
# 2.2 Define the spatial points (locations)
xg = seq(ia.range[1], ia.range[2], length.out=30)
yg = seq(ia.range[3], ia.range[4], length.out=30)
iagrid.locs = expand.grid(xg, yg)
map("state", "iowa")
points(iagrid.locs, pch=20)
ntot = dim(iagrid.locs)[1]
# 2.3 Get a matrix of pairwise distances
distmat = as.matrix(dist(iagrid.locs))
max_dist = max(distmat)
# 2.4 Use a true exponential covariance model to define the true covariance structure
theta1 = 2
theta2 = 1
Sig = theta1 * exp(-distmat / theta2)
plot(seq(0, max_dist, length.out=20),
theta1 * exp(-seq(0, max_dist, length.out=20) / theta2),
type="b", ylab="cov", xlab="distance")
y = rmvnorm(1, matrix(5,ntot,1), Sig) # takes some time
image(matrix(y, length(xg), length(yg)), x=xg, y=yg,
col=rev(rainbow(100, start=0, end=.7)))
map("state", "iowa", lwd=3, add=TRUE)
box() # add a boundary box to the plot
# 2. Simulating a Gaussian spatial process
# 2.1 Obtain the limits of our spatial domain
ia.range = map("state", "iowa", plot=FALSE)$range
rx = ia.range[2] - ia.range[1] # range in x direction
ry = ia.range[4] - ia.range[3] # range in y direction
# 2.2 Define the spatial points (locations)
xg = seq(ia.range[1], ia.range[2], length.out=30)
yg = seq(ia.range[3], ia.range[4], length.out=30)
iagrid.locs = expand.grid(xg, yg)
map("state", "iowa")
points(iagrid.locs, pch=20)
ntot = dim(iagrid.locs)[1]
# 2.3 Get a matrix of pairwise distances
distmat = as.matrix(dist(iagrid.locs))
max_dist = max(distmat)
# 2.3 Get a matrix of pairwise distances
distmat = as.matrix(dist(iagrid.locs))
max_dist = max(distmat)
# 2.4 Use a true exponential covariance model to define the true covariance structure
theta1 = 2
theta2 = 1
Sig = theta1 * exp(-distmat / theta2)
plot(seq(0, max_dist, length.out=20),
theta1 * exp(-seq(0, max_dist, length.out=20) / theta2),
type="b", ylab="cov", xlab="distance")
theta1 = 3
theta2 = 1
Sig = theta1 * exp(-distmat / theta2)
plot(seq(0, max_dist, length.out=20),
theta1 * exp(-seq(0, max_dist, length.out=20) / theta2),
type="b", ylab="cov", xlab="distance")
theta1 = 3
theta2 = 0.5
Sig = theta1 * exp(-distmat / theta2)
plot(seq(0, max_dist, length.out=20),
theta1 * exp(-seq(0, max_dist, length.out=20) / theta2),
type="b", ylab="cov", xlab="distance")
theta1 = 5
theta2 = 0.5
Sig = theta1 * exp(-distmat / theta2)
plot(seq(0, max_dist, length.out=20),
theta1 * exp(-seq(0, max_dist, length.out=20) / theta2),
type="b", ylab="cov", xlab="distance")
# 2.5 Simulate a spatial random process from the Gaussian model
y = rmvnorm(1, matrix(5,ntot,1), Sig)
image(matrix(y, length(xg), length(yg)), x=xg, y=yg,
col=rev(rainbow(100, start=0, end=.7)))
map("state", "iowa", lwd=3, add=TRUE)
box() # add a boundary box to the plot
idxkeep = sort(sample(1:ntot, round(0.3*ntot)))
ymask = matrix(0, ntot, 1)
ymask[idxkeep, ] = 1
image(matrix(y, length(xg), length(yg)), x=xg, y=yg,
col = rev(rainbow(100,start=0,end=.7)))
image(matrix(ymask, length(xg), length(yg)), x=xg, y=yg,
col=c("white","transparent"), add=TRUE)
map("state", "iowa", add=TRUE, lwd=3)
y = rmvnorm(1, matrix(5,ntot,1), Sig)
image(matrix(y, length(xg), length(yg)), x=xg, y=yg,
col=rev(rainbow(100, start=0, end=.7)))
map("state", "iowa", lwd=3, add=TRUE)
box() # add a boundary box to the plot
box()
# 2.5 Simulate a spatial random process from the Gaussian model
y = rmvnorm(1, matrix(5,ntot,1), Sig)
idxkeep = sort(sample(1:ntot, round(0.3*ntot)))
ymask = matrix(0, ntot, 1)
ymask[idxkeep, ] = 1
image(matrix(y, length(xg), length(yg)), x=xg, y=yg,
col = rev(rainbow(100,start=0,end=.7)))
image(matrix(ymask, length(xg), length(yg)), x=xg, y=yg,
col=c("white","transparent"), add=TRUE)
map("state", "iowa", add=TRUE, lwd=3)
box()
# 4. Estimate the empirical semi-variogram
# 4.1 Create a geodata object using the subset of simulated data
n = length(idxkeep)
ydat = matrix(y[idxkeep], n, 1)
dat.locs = iagrid.locs[idxkeep, ]
ygeodat = as.geodata(cbind(dat.locs, ydat))
# 4.2 Estimate the empirical semi-variogram of the sample data
distsample = as.matrix(dist(dat.locs)) # distance between sample pairs
maxd = max(distsample)/2
y.v = variog(ygeodat, max.dist=maxd) # estimate empirical semi-variogram
y.v$beta.ols # estimated trend of the sample data
# 4.1 Create a geodata object using the subset of simulated data
n = length(idxkeep)
ydat = matrix(y[idxkeep], n, 1)
dat.locs = iagrid.locs[idxkeep, ]
ygeodat = as.geodata(cbind(dat.locs, ydat))
# 4.2 Estimate the empirical semi-variogram of the sample data
distsample = as.matrix(dist(dat.locs)) # distance between sample pairs
maxd = max(distsample)/2
y.v = variog(ygeodat, max.dist=maxd) # estimate empirical semi-variogram
y.v$beta.ols # estimated trend of the sample data
# 4.3 Estimate the true semi-variogram
vt = theta1 - theta1 * exp(-y.v$u/theta2)
# 4.4 Plot the empirical semi-variogram and true semi-variogram
xmax = max(y.v$u, maxd) # xmax to set xlim for plot
ymax = max(y.v$v, vt) # ymax to set ylim for plot
plot(y.v, xlim = c(0,xmax), ylim = c(0,ymax) ) # empricial semivariogram
lines(y.v$u, vt,type="b", pch=20) # add true semivariogram
plot(variog4(ygeodat,max.dist=maxd))
xmax = max(y.v$u, maxd) # xmax to set xlim for plot
ymax = max(y.v$v, vt) # ymax to set ylim for plot
plot(y.v, xlim = c(0,xmax), ylim = c(0,ymax) ) # empricial semivariogram
lines(y.v$u, vt,type="b", pch=20) # add true semivariogram
xmax = max(y.v$u, maxd) # xmax to set xlim for plot
ymax = max(y.v$v, vt) # ymax to set ylim for plot
plot(y.v, xlim = c(0,xmax), ylim = c(0,ymax), col="red") # empricial semivariogram
lines(y.v$u, vt, type="b", pch=20, col="blue") # add true semivariogram
legend(1, 95, legend=c("Empricial", "True"),
col=c("red", "blue"), lty=1:2, cex=0.8)
legend(20, 95, legend=c("Empricial", "True"),
col=c("red", "blue"), lty=1:2, cex=0.8)
xmax = max(y.v$u, maxd) # xmax to set xlim for plot
ymax = max(y.v$v, vt) # ymax to set ylim for plot
plot(y.v, xlim = c(0,xmax), ylim = c(0,ymax), col="red") # empricial semivariogram
lines(y.v$u, vt, type="b", pch=20, col="blue") # add true semivariogram
legend(20, 95, legend=c("Empricial", "True"), col=c("red", "blue"), lty=1:2, cex=0.8)
legend(20, 95, legend=c("Empricial", "True"), col=c("red", "blue"))
legend(1, 95, legend=c("Empricial", "True"), col=c("red", "blue"))
xmax = max(y.v$u, maxd) # xmax to set xlim for plot
ymax = max(y.v$v, vt) # ymax to set ylim for plot
plot(y.v, xlim = c(0,xmax), ylim = c(0,ymax), col="red") # empricial semivariogram
lines(y.v$u, vt, type="b", pch=20, col="blue", lty=2) # add true semivariogram
legend(1, 95, legend=c("Empricial", "True"), col=c("red", "blue"), lty=1:2, cex=0.8)
xmax = max(y.v$u, maxd) # xmax to set xlim for plot
ymax = max(y.v$v, vt) # ymax to set ylim for plot
plot(y.v, xlim = c(0,xmax), ylim = c(0,ymax), col="red") # empricial semivariogram
lines(y.v$u, vt, type="b", pch=20, col="blue", lty=2) # add true semivariogram
legend("bottomright", legend=c("Empricial", "True"), col=c("red", "blue"), lty=1:2, cex=0.8)
# 4.5 Plot the empirical semi-variogram in each of 4 principle directions
plot(variog4(ygeodat,max.dist=maxd))
# 4.5 Plot the empirical semi-variogram in each of 4 principle directions
window()
# 4.5 Plot the empirical semi-variogram in each of 4 principle directions
plot(variog4(ygeodat, max.dist=maxd))
# 4.5 Plot the empirical semi-variogram in each of 4 principle directions
plot(variog4(ygeodat, max.dist=maxd))
y.v.wls=variofit(y.v, cov.model="exponential", wei="cressie")
y.v.wls
plot(y.v ,xlim=c(0,xmax), ylim=c(0,ymax)) # empirical semivariogram
lines(y.v.wls,col=2) # fitted semivariogram
lines(y.v$u,vt,type="b",pch=20) # true semivariogram
y.v.wls=variofit(y.v, cov.model="exponential", wei="cressie")
y.v.wls
plot(y.v ,xlim=c(0,xmax), ylim=c(0,ymax), col="red") # empirical semivariogram
lines(y.v.wls, col="yelow") # fitted semivariogram
lines(y.v$u,vt, type="b", pch=20, col="blue", lty=2) # true semivariogram
legend("bottomright", legend=c("Empricial", "True"), col=c("red", "blue"), lty=1:2, cex=0.8)
y.v.wls=variofit(y.v, cov.model="exponential", wei="cressie")
y.v.wls
plot(y.v ,xlim=c(0,xmax), ylim=c(0,ymax), col="red") # empirical semivariogram
lines(y.v.wls, col="yelow", lty=2) # fitted semivariogram
lines(y.v$u,vt, type="b", pch=20, col="blue", lty=3) # true semivariogram
legend("bottomright", legend=c("Empricial", "Fitted", "True"), col=c("red", "blue"), lty=1:3, cex=0.8)
y.v.wls=variofit(y.v, cov.model="exponential", wei="cressie")
y.v.wls
plot(y.v ,xlim=c(0,xmax), ylim=c(0,ymax), col="red") # empirical semivariogram
lines(y.v.wls, col="black", lty=2) # fitted semivariogram
lines(y.v$u,vt, type="b", pch=20, col="blue", lty=3) # true semivariogram
legend("bottomright", legend=c("Empricial", "Fitted", "True"), col=c("red", "blue"), lty=1:3, cex=0.8)
y.v.wls=variofit(y.v, cov.model="exponential", wei="cressie")
y.v.wls
plot(y.v ,xlim=c(0,xmax), ylim=c(0,ymax), col="red") # empirical semivariogram
lines(y.v.wls, col="black", lty=2) # fitted semivariogram
lines(y.v$u,vt, type="b", pch=20, col="blue", lty=3) # true semivariogram
legend("bottomright", legend=c("Empricial", "Fitted", "True"),
col=c("red", "black", "blue"), lty=1:3, cex=0.8)
